################### ALB COntroller EKS ####################

Create OIDC provide

eksctl utils associate-iam-oidc-provider --region=ap-south-1 --cluster=EKS-2 --approve

Download the Policy 

$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.2/docs/install/iam_policy.json

Create an IAM policy using the policy downloaded in the previous step.

$ aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy.json
	
Create IAM Role using eksctl

$ eksctl create iamserviceaccount \
  --cluster=my-cluster \ #REPLACE CLUSTER NAME
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --role-name AmazonEKSLoadBalancerControllerRole \ 
  --attach-policy-arn=arn:aws:iam::111122223333:policy/AWSLoadBalancerControllerIAMPolicy \ #REPLACE ARM
  --approve

To delete existing user if it gives error -

$ eksctl delete iamserviceaccount \
  --cluster=demo-cluster \
  --namespace=kube-system \
  --name=aws-load-balancer-controller


Install AWS Load Balancer Controller 

to install helm 

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh

$ helm repo add eks https://aws.github.io/eks-charts

$ helm repo update eks

install the AWS Load Balancer Controller.

Replace my-cluster with the name of your cluster. In the

helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
  -n kube-system \
  --set clusterName=my-cluster \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controller 
  
 Verify that the controller is installed
 
Now create the deployment - 

$ kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.2/docs/examples/2048/2048_full.yaml

verify ingress is up and configure

$ kubectl get ingress -n game-2048


================================================================================================================================================
############################################TG Binding###########################################################################################

Create a TG and Load balancer 

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nginx-app
  name: nginx-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-app
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx-app
    spec:
      containers:
      - image: nginx
        name: nginx
        resources: {}
status: {}

---

apiVersion: v1
kind: Service
metadata:
  name: ngx-service
spec:
  type: NodePort
  selector:
    app: nginx-app
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30207

---
---

apiVersion: elbv2.k8s.aws/v1beta1
kind: TargetGroupBinding
metadata:
  name: nginx-tgb
spec:
  serviceRef:
    name: ngx-service # route traffic to the awesome-service
    port: 80
  targetGroupARN: arn:aws:elasticloadbalancing:ap-south-1:560864074945:targetgroup/TGB-Target/3f08e8fe888794fb







