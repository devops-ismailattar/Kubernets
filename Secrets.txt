####################### Kubernetics secrets ###############

Check avalible secrets first 

$  kubectl get secrets

now lets create the secrets with literal optin 

$ kubectl create secret generic  my-secret(name)  --from-literal=sqlpass(credential name)=password111(your password)

$ kubectl get secret

$  kubectl describe secret my-secret

if you want to chcek how secret work also wanto check credential-details like pass , then run belo command

$ kubectl get secret my-secret -o yaml

###in the output you will see that the password is decoted formate however you had put simple readable password ##

now lets encode the password value with base64

$ echo cGFzc3dvcmQxMTE=(decoted value) |base64 -d


Now let create secret with file option 

$ kubectl create secret generic file-secret(secretname) --from-file=secrets(path of the file)

$ kubectl get secret

lets create secret using yaml manifest

$ vim secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: yaml-secret
data:
  username: sql-admin(c3FsLWFkbWlu)
  password: password999(cGFzc3dvcmQ5OTk=)
  
$ kubectl create -f secrets.yaml

you will get error to and be asked to enter username pass in decoated formate

decode the palin text 

$ echo -n 'password999' |base64

enter in file 

create secret now 

$ kubectl create -f secrets.yaml

$ kubectl get secret

if you dont want to decode data manually while creating secret via yaml manifest , you can specify spring data in yaml file.


apiVersion: v1
kind: Secret
metadata:
  name: secret-4
stringData:
  username: admin
  password: sql-55555
  
$  kubectl create -f secrets.yaml

$ $ kubectl get secret




  





